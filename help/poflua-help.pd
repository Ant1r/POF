#N canvas 668 257 940 626 12;
#X declare -lib pof;
#X declare -path lua;
#X obj 273 12 declare -lib pof;
#N canvas 604 119 737 421 texture 0;
#X obj 105 33 pofhead;
#X obj 105 89 t a a, f 13;
#X obj 193 114 poftranslate 200;
#X obj 105 61 pofvisible;
#X obj 188 31 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X obj 193 138 pofimage logo/pOf.png POFPNG;
#X floatatom 599 353 5 0 0 0 - - - 0;
#X obj 599 328 unpack f f;
#X floatatom 666 354 5 0 0 0 - - - 0;
#X msg 42 130 reload;
#X obj 105 167 poflua test_texture \; local tex=nil \; \; function
M:draw() \; if(tex) then tex:draw(0 \, 0) else \; tex=M:gettexture("POFPNG")
\; if(tex) then self:out("size" \, tex:getWidth() \, tex:getHeight())
end \; end \; end, f 71;
#X obj 599 304 route size;
#X connect 0 0 3 0;
#X connect 1 0 10 0;
#X connect 1 1 2 0;
#X connect 2 0 5 0;
#X connect 3 0 1 0;
#X connect 4 0 3 0;
#X connect 7 0 6 0;
#X connect 7 1 8 0;
#X connect 9 0 10 0;
#X connect 10 1 11 0;
#X connect 11 0 7 0;
#X restore 23 366 pd texture;
#N canvas 551 128 822 388 fonts 0;
#X obj 47 31 pofhead;
#X obj 47 59 pofvisible;
#X obj 130 29 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X msg 65 97 reload;
#X msg 225 170 20;
#X floatatom 285 165 5 0 0 0 - - - 0;
#X msg 370 142 2;
#X floatatom 406 144 5 0 0 0 - - - 0;
#X msg 370 170 m settext ce texte est franchement long\\\, il va sans
doute tenir sur plusieurs lignes ! Et maintenant\\\, un num√©ro\\\,
le : \$1;
#X msg 80 137 1;
#X msg 117 136 2;
#X obj 553 92 loadbang;
#X msg 553 116 10;
#X msg 152 137 3;
#X msg 225 199 m set fontsize \$1;
#X obj 190 70 poffonts \$0-font3 font/Quicksand-Bold.ttf;
#X obj 80 161 list prepend \$0;
#X msg 80 200 m setfont \$1-font\$2;
#X obj 190 46 poffonts \$0-font2 font/FreeMonoBold.ttf;
#X obj 189 21 poffonts \$0-font1 font/vera.ttf;
#X msg 369 261 m set centered \$1;
#X obj 369 237 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X obj 47 315 poflua test_font -l lua/testfont.lua \; M:setfont("\$0-font3"
\, 30) \;;
#X connect 0 0 1 0;
#X connect 1 0 22 0;
#X connect 2 0 1 0;
#X connect 3 0 22 0;
#X connect 4 0 14 0;
#X connect 5 0 14 0;
#X connect 6 0 8 0;
#X connect 7 0 8 0;
#X connect 8 0 22 0;
#X connect 9 0 16 0;
#X connect 10 0 16 0;
#X connect 11 0 12 0;
#X connect 12 0 8 0;
#X connect 13 0 16 0;
#X connect 14 0 22 0;
#X connect 16 0 17 0;
#X connect 17 0 22 0;
#X connect 20 0 22 0;
#X connect 21 0 20 0;
#X restore 22 393 pd fonts;
#N canvas 948 134 550 532 sndrcv 0;
#X msg 74 145 reload;
#X obj 62 432 r testrcv;
#X obj 45 87 pofhead;
#X msg 79 357 hello lua;
#X obj 41 352 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X msg 157 359 0 1 \$1;
#X floatatom 157 325 5 0 0 0 - - - 0;
#X msg 232 353 0 1 \$1;
#X floatatom 232 319 5 0 0 0 - - - 0;
#X obj 232 382 s testsnd2;
#X obj 79 383 s testsnd1;
#X msg 154 145 receive testsnd3;
#X obj 324 380 s testsnd3;
#X floatatom 324 353 5 0 0 0 - - - 0;
#X obj 45 118 pofvisible 1;
#X obj 117 79 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X text 152 125 dynamically add a receiver:;
#X text 20 16 poflua can be set to internally receive from given Pd's
channel(s). It also have the ability to send the Pd's channels., f
68;
#X text 136 62 receiving is only possible if the object is "visible".
Otherwise the messages are queued and will be unqueued at first draw
cyle., f 54;
#X obj 45 183 poflua test_sndrcv \; \; M:addreceive("testsnd1") \;
M:addreceive("testsnd2") \; function M:receive(origin \, ...) \; M:send("testrcv"
\, "from" \, origin \, ":" \, ...) \; end;
#X obj 62 459 print testrcv;
#X connect 0 0 19 0;
#X connect 1 0 20 0;
#X connect 2 0 14 0;
#X connect 3 0 10 0;
#X connect 4 0 10 0;
#X connect 5 0 10 0;
#X connect 6 0 5 0;
#X connect 7 0 9 0;
#X connect 8 0 7 0;
#X connect 11 0 19 0;
#X connect 13 0 12 0;
#X connect 14 0 19 0;
#X connect 15 0 14 0;
#X restore 22 418 pd sndrcv;
#N canvas 656 277 661 462 draw 0;
#X obj 49 36 pofhead;
#X obj 24 37 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000
0 1;
#X floatatom 557 406 8 0 0 0 - - - 0;
#X obj 49 62 pofvisible 0;
#X obj 49 87 t a a, f 38;
#X obj 557 381 route loops;
#X obj 49 114 poflua draw_\$0 \; \; local rnd = of.random \; local
setcolor = of.setColor \; local drawrect = of.drawRectangle \; \; local
count = 500 \; local loops = 0 \; local size = 150 \; \; function M:draw()
\; for i=0 \, count do \; setcolor(rnd(0 \, 255) \, rnd(0 \, 255) \,
rnd(0 \, 255) \, 255) \; drawrect(rnd(-size \, size) \, rnd(-size \,
size) \, rnd(10 \, 20) \, rnd(10 \, 20)) \; loops = loops + 1 \; end
\; M:out("loops" \, loops) \; end \;, f 73;
#X connect 0 0 3 0;
#X connect 1 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 5 0 2 0;
#X connect 6 1 5 0;
#X restore 22 315 pd draw;
#N canvas 660 308 529 390 image 0;
#X obj 116 43 pofhead;
#X obj 116 71 pofvisible;
#X obj 199 41 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X msg 44 64 reload;
#X obj 116 95 poflua test_image \; local im=of.Image(M:getfile("logo/pOf.png"))
\; \; function M:draw() \; of.setRectMode(of.RECTMODE_CENTER) \; im:draw(0
\, 0) \; of.setRectMode(of.RECTMODE_CORNER) \; end;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X restore 22 341 pd image;
#N canvas 806 131 909 663 vertical_slider_class 0;
#X floatatom 496 149 5 0 0 0 - - - 0;
#X obj 65 71 pofhead;
#X obj 33 71 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000
0 1;
#X obj 65 125 t a a, f 50;
#X obj 706 317 declare -path lua;
#X msg 494 105 reload;
#X obj 124 194 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc
#000000 #000000 0 1;
#X obj 65 99 pofvisible 0;
#X msg 107 159 reload;
#X msg 121 219 m set \$1;
#X msg 123 279 lua M.border=\$1;
#X floatatom 123 254 5 0 0 0 - - - 0;
#X obj 202 431 route float;
#X floatatom 498 201 5 0 0 0 - - - 0;
#X floatatom 498 253 5 0 0 0 - - - 0;
#X floatatom 123 306 5 0 0 0 - - - 0;
#X msg 123 329 lua M.w=\$1;
#X msg 498 278 lua M.proto.w=\$1;
#X msg 498 224 lua M.proto.h=\$1;
#X msg 496 174 lua M.proto.border=\$1;
#X obj 65 380 poflua vslider_\$0 \; vsliderClass:new(M) \; M.w=80 \;
;
#X msg 202 455 set \$1;
#X floatatom 258 455 5 0 0 0 - - - 0;
#X text 188 15 Here we first define a vertical slider class \, from
the file "vsliderClass.lua"., f 83;
#X text 197 35 The class is named "vsliderClass" by the poflua object.
;
#X text 199 54 It is then instancied into a "vlider_\$0" object \,
which properties can be overwritten.;
#X obj 65 529 poftranslate 200 0;
#X msg 208 530 reload;
#X text 96 505 We can create other sliders at no cost.;
#X obj 65 556 poflua vslider2_\$0 \; vsliderClass:new(M) \; M.red=1
;
#X msg 643 276 lua M.proto.red=\$1;
#X obj 643 253 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X text 507 128 Class fields can be overwritten by the final object
;
#X obj 205 611 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc
#000000 #000000 0 1;
#X msg 245 278 lua M.border=nil;
#X msg 243 310 lua M.rad=nil;
#X obj 412 318 poflua vsliderClass -l vsliderClass.lua \; M.proto.border
= 10 \; M.proto.knobW = 10;
#X connect 0 0 19 0;
#X connect 1 0 7 0;
#X connect 2 0 7 0;
#X connect 3 0 20 0;
#X connect 3 1 36 0;
#X connect 5 0 36 0;
#X connect 6 0 9 0;
#X connect 7 0 3 0;
#X connect 8 0 20 0;
#X connect 9 0 20 0;
#X connect 10 0 20 0;
#X connect 11 0 10 0;
#X connect 12 0 21 0;
#X connect 12 0 22 0;
#X connect 13 0 18 0;
#X connect 14 0 17 0;
#X connect 15 0 16 0;
#X connect 16 0 20 0;
#X connect 17 0 36 0;
#X connect 18 0 36 0;
#X connect 19 0 36 0;
#X connect 20 0 26 0;
#X connect 20 1 12 0;
#X connect 21 0 6 0;
#X connect 26 0 29 0;
#X connect 27 0 29 0;
#X connect 29 1 33 0;
#X connect 30 0 36 0;
#X connect 31 0 30 0;
#X connect 34 0 20 0;
#X connect 35 0 20 0;
#X restore 24 449 pd vertical_slider_class;
#X obj 23 143 pofhead;
#X msg 88 143 reload;
#X obj 160 219 print fromlua;
#X obj 23 167 poflua luaobj_\$0 \; print("hello") \; M:out("world")
\;, f 20;
#N canvas 1147 111 574 352 available_functions 0;
#X obj 74 86 pofhead;
#X msg 172 51 reload;
#X msg 176 87 m print_table of;
#X msg 175 118 m print_table pof;
#X msg 175 149 m print_table poflua;
#X msg 174 179 m print_table poflua functions;
#X text 73 280 It has been necessary to write the code into a .lua
file \, because curly braces were needed (to convert variable arguments
'...' to a table);
#X msg 174 206 m print_table self;
#X obj 74 245 poflua luaobj_printtable_\$0 -l print_table.lua \; M.TestVariable
= 1;
#X connect 0 0 8 0;
#X connect 1 0 8 0;
#X connect 2 0 8 0;
#X connect 3 0 8 0;
#X connect 4 0 8 0;
#X connect 5 0 8 0;
#X connect 7 0 8 0;
#X restore 25 477 pd available_functions;
#X text 24 502 limitations:;
#X text 24 565 - curly braces cannot (yet) be used in Pd object texts.
So for "serious" code \, writing to a separate .lua file is mandatory.
;
#X text 25 518 - don't start your poflua name with number \; don't
use '-' in variable name \, e.g '\$0-foo' is not allowed \, but foo_\$0
is.;
#X obj 9 13 cnv 15 250 20 empty empty empty 20 12 0 14 #c4fcc4 #404040
0;
#X obj 9 35 cnv 15 200 20 empty empty empty 20 12 0 14 #fcfcc4 #404040
0;
#X obj 9 66 cnv 15 200 20 empty empty empty 20 12 0 14 #fce0c4 #404040
0;
#X text 13 14 Pof: Pd OpenFrameworks externals;
#X text 18 66 poflua : lua interpreter;
#X text 252 51 messages to inlet:;
#X text 24 94 poflua OBJNAME [-l LUAFILE] [ \; INIT_SCRIPT], f 31
;
#X text 269 111 - lua SCRIPT: execute a lua script synchronously. M
represents the current poflua module (object., f 63;
#X text 270 142 - m METHOD [ARGS...]: execute a module's method asynchronously.
, f 65;
#X text 270 159 - f METHOD [ARGS...]: execute a module's function asynchronously.
, f 65;
#X text 270 177 - receive CHANNEL: setup a receiver for given channel.
Incomming messages will call the module's method "receive(from_channel
\, message...)"., f 74;
#X text 339 289 - if DONTCAPTURE = 3 \, dynamically test for enter/leave
events AND capture when entered or touched down., f 63;
#X text 339 277 - if DONTCAPTURE = 2 \, dynamically test for enter/leave
events., f 65;
#X text 312 249 - dont_capture DONTCAPTURE: let the touch events climb
the tree even after touchdown has been detected.;
#X text 313 319 - multi : when touchdown has been detected \, continue
to listen to other touch id events (only useful for multitouch apps).
, f 72;
#X text 313 221 - size WIDTH HEIGHT: set the size of the touchable
area (centered to the current position), f 73;
#X text 269 206 - touchconfig COMMAND ARGS: configure the touch behavior
of the object:, f 72;
#X text 276 354 - continuousForce CONTFORCE(0 or 1): draw continuously
(default 1), f 67;
#X text 277 381 - bang: trigger the drawing next frame, f 67;
#X text 276 367 - force: force the drawing next frame, f 67;
#X text 20 35 (c) Antoine Rousseau 2022;
#X text 270 67 - reload [reset]: reload the object from the optional
luafile and the init script. If "reset" is given \, the module's table
is re-created from scratch before reloading., f 82;
#X connect 7 0 10 0;
#X connect 8 0 10 0;
#X connect 10 1 9 0;
